// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: submodule/shop/shop.proto

package shop

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MiniShopClient is the client API for MiniShop service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiniShopClient interface {
	CreateItem(ctx context.Context, in *CreateItemReq, opts ...grpc.CallOption) (*CreateItemRes, error)
	UpdateItem(ctx context.Context, in *UpdateItemReq, opts ...grpc.CallOption) (*UpdateItemRes, error)
	GetItem(ctx context.Context, in *GetItemReq, opts ...grpc.CallOption) (*GetItemRes, error)
	GetAllItem(ctx context.Context, in *GetAllItemReq, opts ...grpc.CallOption) (*GetAllItemRes, error)
	DeleteItem(ctx context.Context, in *DeleteItemReq, opts ...grpc.CallOption) (*GetAllItemRes, error)
}

type miniShopClient struct {
	cc grpc.ClientConnInterface
}

func NewMiniShopClient(cc grpc.ClientConnInterface) MiniShopClient {
	return &miniShopClient{cc}
}

func (c *miniShopClient) CreateItem(ctx context.Context, in *CreateItemReq, opts ...grpc.CallOption) (*CreateItemRes, error) {
	out := new(CreateItemRes)
	err := c.cc.Invoke(ctx, "/shop.MiniShop/CreateItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miniShopClient) UpdateItem(ctx context.Context, in *UpdateItemReq, opts ...grpc.CallOption) (*UpdateItemRes, error) {
	out := new(UpdateItemRes)
	err := c.cc.Invoke(ctx, "/shop.MiniShop/UpdateItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miniShopClient) GetItem(ctx context.Context, in *GetItemReq, opts ...grpc.CallOption) (*GetItemRes, error) {
	out := new(GetItemRes)
	err := c.cc.Invoke(ctx, "/shop.MiniShop/GetItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miniShopClient) GetAllItem(ctx context.Context, in *GetAllItemReq, opts ...grpc.CallOption) (*GetAllItemRes, error) {
	out := new(GetAllItemRes)
	err := c.cc.Invoke(ctx, "/shop.MiniShop/GetAllItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miniShopClient) DeleteItem(ctx context.Context, in *DeleteItemReq, opts ...grpc.CallOption) (*GetAllItemRes, error) {
	out := new(GetAllItemRes)
	err := c.cc.Invoke(ctx, "/shop.MiniShop/DeleteItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiniShopServer is the server API for MiniShop service.
// All implementations must embed UnimplementedMiniShopServer
// for forward compatibility
type MiniShopServer interface {
	CreateItem(context.Context, *CreateItemReq) (*CreateItemRes, error)
	UpdateItem(context.Context, *UpdateItemReq) (*UpdateItemRes, error)
	GetItem(context.Context, *GetItemReq) (*GetItemRes, error)
	GetAllItem(context.Context, *GetAllItemReq) (*GetAllItemRes, error)
	DeleteItem(context.Context, *DeleteItemReq) (*GetAllItemRes, error)
	mustEmbedUnimplementedMiniShopServer()
}

// UnimplementedMiniShopServer must be embedded to have forward compatible implementations.
type UnimplementedMiniShopServer struct {
}

func (UnimplementedMiniShopServer) CreateItem(context.Context, *CreateItemReq) (*CreateItemRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItem not implemented")
}
func (UnimplementedMiniShopServer) UpdateItem(context.Context, *UpdateItemReq) (*UpdateItemRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItem not implemented")
}
func (UnimplementedMiniShopServer) GetItem(context.Context, *GetItemReq) (*GetItemRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItem not implemented")
}
func (UnimplementedMiniShopServer) GetAllItem(context.Context, *GetAllItemReq) (*GetAllItemRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllItem not implemented")
}
func (UnimplementedMiniShopServer) DeleteItem(context.Context, *DeleteItemReq) (*GetAllItemRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItem not implemented")
}
func (UnimplementedMiniShopServer) mustEmbedUnimplementedMiniShopServer() {}

// UnsafeMiniShopServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiniShopServer will
// result in compilation errors.
type UnsafeMiniShopServer interface {
	mustEmbedUnimplementedMiniShopServer()
}

func RegisterMiniShopServer(s grpc.ServiceRegistrar, srv MiniShopServer) {
	s.RegisterService(&MiniShop_ServiceDesc, srv)
}

func _MiniShop_CreateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiniShopServer).CreateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.MiniShop/CreateItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiniShopServer).CreateItem(ctx, req.(*CreateItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiniShop_UpdateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiniShopServer).UpdateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.MiniShop/UpdateItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiniShopServer).UpdateItem(ctx, req.(*UpdateItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiniShop_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiniShopServer).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.MiniShop/GetItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiniShopServer).GetItem(ctx, req.(*GetItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiniShop_GetAllItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiniShopServer).GetAllItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.MiniShop/GetAllItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiniShopServer).GetAllItem(ctx, req.(*GetAllItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiniShop_DeleteItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiniShopServer).DeleteItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.MiniShop/DeleteItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiniShopServer).DeleteItem(ctx, req.(*DeleteItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MiniShop_ServiceDesc is the grpc.ServiceDesc for MiniShop service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MiniShop_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shop.MiniShop",
	HandlerType: (*MiniShopServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateItem",
			Handler:    _MiniShop_CreateItem_Handler,
		},
		{
			MethodName: "UpdateItem",
			Handler:    _MiniShop_UpdateItem_Handler,
		},
		{
			MethodName: "GetItem",
			Handler:    _MiniShop_GetItem_Handler,
		},
		{
			MethodName: "GetAllItem",
			Handler:    _MiniShop_GetAllItem_Handler,
		},
		{
			MethodName: "DeleteItem",
			Handler:    _MiniShop_DeleteItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "submodule/shop/shop.proto",
}
